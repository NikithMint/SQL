dotnet ef dbcontext scaffold "Server=localhost;Database=TaskManagerDB;Trusted_Connection=True;" Microsoft.EntityFrameworkCore.SqlServer -o DAL -t Tasks --force
dotnet tool install --global dotnet-ef



A network-related or instance-specific error occurred while establishing a connection to SQL Server. The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server is configured to allow remote connections. (provider: SQL Network Interfaces, error: 26 - Error Locating Server/Instance Specified) 
// Models/TaskDto.cs
namespace TaskManager.Models
{
    public class TaskDto
    {
        public int TaskID { get; set; }
        public string TaskDescription { get; set; }
        public DateTime StartDate { get; set; }
        public DateTime ExpectedClosureDate { get; set; }
        public string AssignedTo { get; set; }
        public bool CompletionStatus { get; set; }
    }
}

// Repositories/ITaskRepository.cs
using TaskManager.Models;

namespace TaskManager.Repositories
{
    public interface ITaskRepository
    {
        IEnumerable<TaskDto> GetAll();
        TaskDto GetById(int id);
        void Add(TaskDto task);
        void Update(TaskDto task);
        void Delete(int id);
        void Save();
    }
}

// Repositories/TaskRepository.cs
using TaskManager.DAL;
using TaskManager.Models;

namespace TaskManager.Repositories
{
    public class TaskRepository : ITaskRepository
    {
        private readonly TaskManagerDBContext _context;

        public TaskRepository(TaskManagerDBContext context)
        {
            _context = context;
        }

        public IEnumerable<TaskDto> GetAll()
        {
            return _context.Tasks.Select(t => new TaskDto
            {
                TaskID = t.TaskId,
                TaskDescription = t.TaskDescription,
                StartDate = t.StartDate,
                ExpectedClosureDate = t.ExpectedClosureDate,
                AssignedTo = t.AssignedTo,
                CompletionStatus = t.CompletionStatus ?? false
            }).ToList();
        }

        public TaskDto GetById(int id)
        {
            var t = _context.Tasks.Find(id);
            if (t == null) return null;

            return new TaskDto
            {
                TaskID = t.TaskId,
                TaskDescription = t.TaskDescription,
                StartDate = t.StartDate,
                ExpectedClosureDate = t.ExpectedClosureDate,
                AssignedTo = t.AssignedTo,
                CompletionStatus = t.CompletionStatus ?? false
            };
        }

        public void Add(TaskDto dto)
        {
            var task = new Task
            {
                TaskDescription = dto.TaskDescription,
                StartDate = dto.StartDate,
                ExpectedClosureDate = dto.ExpectedClosureDate,
                AssignedTo = dto.AssignedTo,
                CompletionStatus = dto.CompletionStatus
            };
            _context.Tasks.Add(task);
        }

        public void Update(TaskDto dto)
        {
            var task = _context.Tasks.Find(dto.TaskID);
            if (task == null) return;

            task.TaskDescription = dto.TaskDescription;
            task.StartDate = dto.StartDate;
            task.ExpectedClosureDate = dto.ExpectedClosureDate;
            task.AssignedTo = dto.AssignedTo;
            task.CompletionStatus = dto.CompletionStatus;
        }

        public void Delete(int id)
        {
            var task = _context.Tasks.Find(id);
            if (task != null)
                _context.Tasks.Remove(task);
        }

        public void Save()
        {
            _context.SaveChanges();
        }
    }
}
// Program.cs
using Microsoft.EntityFrameworkCore;
using TaskManager.DAL;
using TaskManager.Repositories;

var builder = WebApplication.CreateBuilder(args);

// Add services
builder.Services.AddControllersWithViews();
builder.Services.AddDbContext<TaskManagerDBContext>(options =>
    options.UseSqlServer("Your_Connection_String_Here"));

builder.Services.AddScoped<ITaskRepository, TaskRepository>();

var app = builder.Build();

app.UseStaticFiles();
app.UseRouting();
app.MapDefaultControllerRoute();
app.Run();

// Controllers/TasksController.cs
using Microsoft.AspNetCore.Mvc;
using TaskManager.Models;
using TaskManager.Repositories;

namespace TaskManager.Controllers
{
    public class TasksController : Controller
    {
        private readonly ITaskRepository _repository;

        public TasksController(ITaskRepository repository)
        {
            _repository = repository;
        }

        public IActionResult Index()
        {
            var tasks = _repository.GetAll();
            return View(tasks);
        }

        public IActionResult Details(int id)
        {
            var task = _repository.GetById(id);
            if (task == null) return NotFound();
            return View(task);
        }

        public IActionResult Create()
        {
            return View();
        }

        [HttpPost]
        public IActionResult Create(TaskDto dto)
        {
            if (ModelState.IsValid)
            {
                _repository.Add(dto);
                _repository.Save();
                return RedirectToAction("Index");
            }
            return View(dto);
        }

        public IActionResult Edit(int id)
        {
            var task = _repository.GetById(id);
            if (task == null) return NotFound();
            return View(task);
        }

        [HttpPost]
        public IActionResult Edit(TaskDto dto)
        {
            if (ModelState.IsValid)
            {
                _repository.Update(dto);
                _repository.Save();
                return RedirectToAction("Index");
            }
            return View(dto);
        }

        public IActionResult Delete(int id)
        {
            var task = _repository.GetById(id);
            if (task == null) return NotFound();
            return View(task);
        }

        [HttpPost, ActionName("Delete")]
        public IActionResult DeleteConfirmed(int id)
        {
            _repository.Delete(id);
            _repository.Save();
            return RedirectToAction("Index");
        }
    }
}



@model TaskManager.Models.TaskDto

<h2>Create Task</h2>

<form asp-action="Create" method="post">
    <div>
        <label asp-for="TaskDescription"></label>
        <input asp-for="TaskDescription" class="form-control" />
    </div>
    <div>
        <label asp-for="StartDate"></label>
        <input asp-for="StartDate" type="date" class="form-control" />
    </div>
    <div>
        <label asp-for="ExpectedClosureDate"></label>
        <input asp-for="ExpectedClosureDate" type="date" class="form-control" />
    </div>
    <div>
        <label asp-for="AssignedTo"></label>
        <input asp-for="AssignedTo" class="form-control" />
    </div>
    <div>
        <label asp-for="CompletionStatus"></label>
        <input asp-for="CompletionStatus" type="checkbox" />
    </div>
    <button type="submit" class="btn btn-success">Create</button>
</form>

<a href="/Tasks">Back to List</a>

@model TaskManager.Models.TaskDto

<h2>Edit Task</h2>

<form asp-action="Edit" method="post">
    <input type="hidden" asp-for="TaskID" />
    <div>
        <label asp-for="TaskDescription"></label>
        <input asp-for="TaskDescription" class="form-control" />
    </div>
    <div>
        <label asp-for="StartDate"></label>
        <input asp-for="StartDate" type="date" class="form-control" />
    </div>
    <div>
        <label asp-for="ExpectedClosureDate"></label>
        <input asp-for="ExpectedClosureDate" type="date" class="form-control" />
    </div>
    <div>
        <label asp-for="AssignedTo"></label>
        <input asp-for="AssignedTo" class="form-control" />
    </div>
    <div>
        <label asp-for="CompletionStatus"></label>
        <input asp-for="CompletionStatus" type="checkbox" />
    </div>
    <button type="submit" class="btn btn-primary">Save</button>
</form>

<a href="/Tasks">Back to List</a>
@model TaskManager.Models.TaskDto

<h2>Delete Task</h2>

<div>
    <p><strong>Description:</strong> @Model.TaskDescription</p>
    <p><strong>Start Date:</strong> @Model.StartDate.ToShortDateString()</p>
    <p><strong>Expected Closure:</strong> @Model.ExpectedClosureDate.ToShortDateString()</p>
    <p><strong>Assigned To:</strong> @Model.AssignedTo</p>
    <p><strong>Status:</strong> @(Model.CompletionStatus ? "Completed" : "Pending")</p>
</div>

<form asp-action="Delete" method="post">
    <input type="hidden" asp-for="TaskID" />
    <button type="submit" class="btn btn-danger">Confirm Delete</button>
</form>

<a href="/Tasks">Cancel</a>
@model TaskManager.Models.TaskDto

<h2>Task Details</h2>

<p><strong>Description:</strong> @Model.TaskDescription</p>
<p><strong>Start Date:</strong> @Model.StartDate.ToShortDateString()</p>
<p><strong>Expected Closure:</strong> @Model.ExpectedClosureDate.ToShortDateString()</p>
<p><strong>Assigned To:</strong> @Model.AssignedTo</p>
<p><strong>Status:</strong> @(Model.CompletionStatus ? "Completed" : "Pending")</p>

<a href="/Tasks">Back to List</a> |
<a href="/Tasks/Edit/@Model.TaskID">Edit</a>

