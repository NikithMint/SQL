dotnet ef dbcontext scaffold "Server=localhost;Database=TaskManagerDB;Trusted_Connection=True;" Microsoft.EntityFrameworkCore.SqlServer -o DAL -t Tasks --force
dotnet tool install --global dotnet-ef



A network-related or instance-specific error occurred while establishing a connection to SQL Server. The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server is configured to allow remote connections. (provider: SQL Network Interfaces, error: 26 - Error Locating Server/Instance Specified) 
// Models/TaskDto.cs
namespace TaskManager.Models
{
    public class TaskDto
    {
        public int TaskID { get; set; }
        public string TaskDescription { get; set; }
        public DateTime StartDate { get; set; }
        public DateTime ExpectedClosureDate { get; set; }
        public string AssignedTo { get; set; }
        public bool CompletionStatus { get; set; }
    }
}

// Repositories/ITaskRepository.cs
using TaskManager.Models;

namespace TaskManager.Repositories
{
    public interface ITaskRepository
    {
        IEnumerable<TaskDto> GetAll();
        TaskDto GetById(int id);
        void Add(TaskDto task);
        void Update(TaskDto task);
        void Delete(int id);
        void Save();
    }
}

// Repositories/TaskRepository.cs
using TaskManager.DAL;
using TaskManager.Models;

namespace TaskManager.Repositories
{
    public class TaskRepository : ITaskRepository
    {
        private readonly TaskManagerDBContext _context;

        public TaskRepository(TaskManagerDBContext context)
        {
            _context = context;
        }

        public IEnumerable<TaskDto> GetAll()
        {
            return _context.Tasks.Select(t => new TaskDto
            {
                TaskID = t.TaskId,
                TaskDescription = t.TaskDescription,
                StartDate = t.StartDate,
                ExpectedClosureDate = t.ExpectedClosureDate,
                AssignedTo = t.AssignedTo,
                CompletionStatus = t.CompletionStatus ?? false
            }).ToList();
        }

        public TaskDto GetById(int id)
        {
            var t = _context.Tasks.Find(id);
            if (t == null) return null;

            return new TaskDto
            {
                TaskID = t.TaskId,
                TaskDescription = t.TaskDescription,
                StartDate = t.StartDate,
                ExpectedClosureDate = t.ExpectedClosureDate,
                AssignedTo = t.AssignedTo,
                CompletionStatus = t.CompletionStatus ?? false
            };
        }

        public void Add(TaskDto dto)
        {
            var task = new Task
            {
                TaskDescription = dto.TaskDescription,
                StartDate = dto.StartDate,
                ExpectedClosureDate = dto.ExpectedClosureDate,
                AssignedTo = dto.AssignedTo,
                CompletionStatus = dto.CompletionStatus
            };
            _context.Tasks.Add(task);
        }

        public void Update(TaskDto dto)
        {
            var task = _context.Tasks.Find(dto.TaskID);
            if (task == null) return;

            task.TaskDescription = dto.TaskDescription;
            task.StartDate = dto.StartDate;
            task.ExpectedClosureDate = dto.ExpectedClosureDate;
            task.AssignedTo = dto.AssignedTo;
            task.CompletionStatus = dto.CompletionStatus;
        }

        public void Delete(int id)
        {
            var task = _context.Tasks.Find(id);
            if (task != null)
                _context.Tasks.Remove(task);
        }

        public void Save()
        {
            _context.SaveChanges();
        }
    }
}
// Program.cs
using Microsoft.EntityFrameworkCore;
using TaskManager.DAL;
using TaskManager.Repositories;

var builder = WebApplication.CreateBuilder(args);

// Add services
builder.Services.AddControllersWithViews();
builder.Services.AddDbContext<TaskManagerDBContext>(options =>
    options.UseSqlServer("Your_Connection_String_Here"));

builder.Services.AddScoped<ITaskRepository, TaskRepository>();

var app = builder.Build();

app.UseStaticFiles();
app.UseRouting();
app.MapDefaultControllerRoute();
app.Run();
